generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  prn         String  @id
  studentName String
  email       String  @unique
  phoneNo     String? @db.VarChar(15)
  password    String  @db.VarChar(255)
  college     College @default(ICEM)

  // Relations
  approvals ApprovalRequest[]
  profile   StudentProfile?
}

model StudentProfile {
  profileId          Int           @id @default(autoincrement())
  prn                String        @unique
  studentID          String?
  fatherName         String?
  motherName         String?
  caste              String?
  subCaste           String?
  nationality        String?
  placeOfBirth       String?
  dateOfBirth        DateTime?
  dobWords           String?
  lastCollege        String?
  yearOfAdmission    DateTime?
  branch             String?
  admissionMode      AdmissionMode
  reasonForLeaving   String?
  lcGenerated        Boolean       @default(false)
  lcReady            Boolean       @default(false)
  lcUrl              String?
  dateOfAdmission    DateTime?
  dateOfLeaving      DateTime?
  progressAndConduct String?
  isFormEditable     Boolean       @default(true)

  // Relations
  student Student @relation(fields: [prn], references: [prn])
}

model Department {
  deptId   Int     @id @default(autoincrement())
  deptName String
  branchId Int?
  college  College @default(ICEM)

  // Relations
  staff            Staff[] // one-to-many staff
  deptHeadId       Int?              @unique
  deptHead         Staff?            @relation("DepartmentHead", fields: [deptHeadId], references: [staffId])
  approvalRequests ApprovalRequest[]
}

model Staff {
  staffId      Int    @id @default(autoincrement())
  name         String
  email        String @unique
  passwordHash String

  deptId     Int
  department Department @relation(fields: [deptId], references: [deptId])

  // HOD relation
  headedDepartment Department? @relation("DepartmentHead")

  // Relation for requests created by staff
  createdRequests ApprovalRequest[] @relation("StaffRequests")

  // Relation for actions performed by staff
  performedActions ApprovalAction[] @relation("StaffActions")
}

model ApprovalRequest {
  approvalId       Int            @id @default(autoincrement())
  deptId           Int
  createdByStaffId Int? // staff who initiated request
  status           ApprovalStatus @default(PENDING)
  approvedAt       DateTime?
  remarks          String?
  deptName         String?
  branch           String?
  studentName      String?
  yearOfAdmission  DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  studentPrn       String

  // Relations
  department     Department       @relation(fields: [deptId], references: [deptId])
  createdByStaff Staff?           @relation("StaffRequests", fields: [createdByStaffId], references: [staffId])
  student        Student          @relation(fields: [studentPrn], references: [prn])
  actions        ApprovalAction[]
}

model ApprovalAction {
  actionId   Int        @id @default(autoincrement())
  approvalId Int
  staffId    Int
  action     ActionType
  remarks    String?
  actionAt   DateTime?  @default(now())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  approval ApprovalRequest @relation(fields: [approvalId], references: [approvalId])
  staff    Staff           @relation("StaffActions", fields: [staffId], references: [staffId])
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  @@map("SuperAdmin")
}

enum AdmissionMode {
  FIRSTYEAR
  DIRECTSECONDYEAR
  MBA
  MCA
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REQUESTED_INFO
}

enum ActionType {
  APPROVED
  REJECTED
  REQUESTED_INFO
  COMMENTED
  REOPENED
}

enum College {
  ICEM
  IGSB
}
